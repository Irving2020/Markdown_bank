- 作用域链
    - 作用域链决定了JS寻找变量的方式
    - 当我们访问一个变量时，JS会首先在当前作用域中寻找，
        如果有则直接使用，如果没有则去上一层作用域中寻找
        如果找到了则使用，如果没有找到在去上一层继续寻找，以此类推
        直到找到全局作用域，如果依然没有找到，则报错 xxx is not defined

    - 函数的作用域在函数定义时就已经确定了，和它的调用位置无关。

- this
    - this是函数调用时的隐含参数，this指向的是一个对象，
        根据函数的调用方式不同，this的值也不同
        1. 以函数的形式调用时，this是window
        2. 以方法的形式调用时，this是调用方法的对象
        3. 以构造函数的形式调用时，this是新建对象
        ...

- 构造函数（constructor）
    - 构造函数是专门用来创建对象的函数
    - 构造函数和普通函数的定义方式没有区别，不同点只是命名方式不一样，
        构造函数使用大写字母开头
    - 一个函数如果直接调用就是一个普通函数，如果使用new关键字调用一个函数
        那么它就是一个构造函数
    - 构造函数的执行流程：
        1. 先创建一个新对象
        2. 将新对象设置为函数中的this
        3. 执行函数中的代码
        4. 将新对象返回
    - 一个构造函数也称为一个类，
        通过一个构造函数创建的对象，这个对象称为该类实例
        通过同一个类创建的对象，称为同一类对象
    - instanceof运算符，用来检查一个对象是否是一个类的实例
        语法：对象 instanceof 类  --> per instanceof Person

    - 未完待续...

- 数组（Array）
    - 数组也是一个对象，数组用来存储有序的数据
    - 数组中所存储的数据被称为元素
    - 数组中的每一个元素都有一个唯一的索引（index）
    - 索引是一组从0开始的整数
    - 使用typeof检查一个数组时，会返回 'object'
    - 创建数组：
        let arr = new Array();
        let arr = [];
        let arr = [元素1, 元素2, 元素3];

    - 获取数组中的元素：
        数组[索引]
        - 如果获取的是数组中不存在的索引，不会报错而是返回undefined

    - 获取数组的长度
        数组.length
        - length 是数组的最大索引+1
        - length 是可以修改

    - 数组的四个方法：
        push()
            - 向数组的末尾添加一个或多个元素，并返回新的长度
        pop()
            - 删除并返回数组的最后一个元素
        unshift()
            - 向数组的开头添加一个或多个元素，并返回新的长度
        shift()
            - 删除并返回数组的第一个元素

    - 数组的遍历：
        - 最通用的方式：
            - 例子：
                for(let i=0; i<数组.length; i++){
                    // 数组[i]
                }

        - for-of
            - 语法：
                for(let 变量 of 数组){
                    语句...
                }

            - 执行：for-of的循环体会执行多次，数组中有几个元素就执行几次，
                    每次执行都会将数组中的元素赋值给变量










