- 类型转换
    - 类型转换指将其他的数据类型转换string、number、boolean
    - 转换为字符串
        - 显式类型转换
            1.调用被转换类型的toString()方法
            - 例子：
                let a = 10;
                a = a.toString();

            2.调用String()函数
            - 例子：
                let a = 10;
                a = String(a);
            - 原理：
                对于具有toString()的值，它还是调用toString()对其进行转换，
                    如果是null和undefined，则直接转换为 'null' 和 'undefined'

        - 隐式类型转换（*****）
            可以通过为任意类型的值加上一个空串('')来将其转换为字符串
            - 例子：
                let a = 10;
                a = a + "";

            - 原理和String()一样


    - 转换为数字
        - 显式类型转换
            - 使用Number()函数
            - 例子：
                let a = '10';
                a = Number(a);
            - 情况：
                字符串：
                    - 如果字符串是一个合法的数字则转换为对应的数字，
                        如果不是，则转换为NaN
                        如果是空格串或空串，则转换为0

                布尔值：
                    true --> 1
                    false --> 0

                null --> 0
                undefined --> NaN

            - 专门用来解析字符串
                parseInt()
                    - 将一个字符串解析为一个整数
                parseFloat()
                    - 将一个字符串解析为一个浮点数

        - 隐式类型转换（*****）
            - 可以使用一元的+来将其它类型转换为数字
            - 例子：
                let a = '10';
                a = +a;
            - 原理同Number()函数

    - 转换为布尔值
        - 显式类型转换
            - 使用Boolean()函数来将其它值转换为布尔值
            - 例子：
                let a = 10；
                a = Boolean(a);

            - 转换的情况：
                所有的表示没有的都是false。

                - false的情况：
                    0、NaN、null、undefined、''、false

                - 注意：
                    对象都是true

        - 隐式类型转换（*****）
            - 可以为任意值取两次反，将其转换为布尔值
            - 例子：
                let a = 10;
                a = !!a;
            - 原理同Boolean()函数

运算符（操作符）
    - 运算符可以用来对一个或多个值进行运算（操作）
    - 算术运算符
        + 加法
        - 减法
        * 乘法
        / 除法
        % 取模
        ** 幂运算

        - 注意：
            - 除了字符串的加法，对于非数值类型的值进行算术运算时，都会转换为数字然后再运算。
            - 两个字符串进行加法时，它会进行拼串操作
            - 任何值和字符串做加法，都会转换为字符串，然后拼串。

    - 一元运算符
        + 正号
        - 负号

    - 自增和自减
        自增++
            - 自增分为 a++ 和 ++a
            - 无论a++还是++a，调用后原变量会立刻自增1
            - 不同点在于 a++ 和 ++a 的值
                a++ 是变量的原值
                ++a 是变量的新值

        自减--
            - 自增分为 a-- 和 --a
            - 无论a--还是--a，调用后原变量会立刻自减1
            - 不同点在于 a-- 和 --a 的值
                a-- 是变量的原值
                --a 是变量的新值

    - 逻辑运算符
        !（逻辑非）
            - 非运算，true变false，false变true。

        &&（逻辑与）
            - 两端都为true，返回true，只要有一个false就返回false
            - 与是找false的
            - 与是短路的与，如果第一个值是false，则不看第二个值
            - 非布尔值：
                会先转换为布尔值，然后运算，最终返回原值
                - 规则：
                    如果第一个值是false，则直接返回第一个，
                    如果第一个值是true，则返回第二个

        ||（逻辑或）
            - 只要有一个true，就返回true，都是false，才返回false
            - 或是找true的
            - 或是短路的或，如果第一个值是true，则不看第二个值
            - 非布尔值：
                 会先转换为布尔值，然后运算，最终返回原值
                 - 规则：
                    如果第一个值是true，则直接返回第一个，
                    如果第一个值是false，则返回第二个

    - 赋值运算符
        =
            - 将右侧的值赋给左侧的变量
        +=
            - a += x 等价于 a = a + x
        -=
        *=
        /=
        %=
        **=

    - 关系运算符
        - 用来比较两个值之间的关系（大小等于），如果关系成立返回true，不成立返回false。
        - >、>=、<、<= 作用同数学
        - 注意：
            对于非数字类型进行比较时，会转换为数字然后比较。
            对于两个字符串类型的值比较大小时，它会逐位比较字符的Unicode编码，
                利用它可以对英文按照字母顺序排序