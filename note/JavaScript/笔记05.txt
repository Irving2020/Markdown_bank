- 可变类型
    - JS中的对象（Object）就是一种可变类型
    - 对代码进行修改时，有两个位置可以被修改：
           变量的值（改变量）
            - 例子：
                a = xx
                obj = xx
                x = xx

            - 变量和变量之间是相互独立，修改一个不会影响其他变量

           对象的值（改对象）
           - 例子：
                a.b = xx
                obj.name = xx
                xx.yy = xx

           - 改对象时会影响到其他指向该对象的变量

- 对象字面量
    - 语法：
        - 创建一个新的对象
            let obj = {};

        - 创建一个对象并添加属性
            let obj = {
                属性名:属性值,
                属性名:属性值,
                属性名:属性值
            };

- for-in语句
    - 用来对属性进行枚举
    - 语法：
        for(let 变量 in 对象){
            语句...
        }

- 方法（method）
    - 对象的属性可以是一个函数，如果对象的属性是一个函数
        则称这个函数是这个对象的方法，调用函数称为调用对象的方法

- 函数（function）
    - 函数也是一个对象，函数中可以存储JS代码，并且在需要时可以对其反复调用
    - 使用typeof 检查一个函数时返回 "function"
    - 语法：
        - 函数声明
            function 函数名([参数1, 参数2 ... 参数N]){
                语句..
                return xx;
            }

        - 函数表达式
            let 函数名 = function([参数1, 参数2 ... 参数N]){
                语句..
                return xx;
            };

        - 立即执行函数（IIFE）
            (function(){
                ....
            })();

    - 函数的调用：
        函数对象 + ()

    - 函数的参数：
        形参
            - 定义函数时可以指定数量不等的形参
            - 形参就相当于在函数中定义了变量但是没有赋值

        实参
            - 调用函数时可以向函数中传递数量不等的实参
            - 实参会赋值给对应的形参
            - JS不会检查形参的类型和数量
                可以传递任意类型的值作为实参
                可以传递任意数量的实参
                    形参实参一边，就一一对应
                    形参多，多余的形参是undefined
                    实参多，多余的实参不会使用

    - 函数的返回值
        - 返回值就是函数的执行结果
        - 在函数中可以通过return来设置函数的返回值
        - 语法：
            return 值;
        - 任何值都可以成为函数的返回值
        - 如果return后不跟值，或不写return则相当于返回undefined
        - return 一执行函数立即结束

    - 作用域（scope）
        - 作用域就是变量的作用范围
        - 有两种作用域：
            全局作用域
            局部作用域
                块作用域
                函数作用域

        - 全局作用域：
            - 全局作用域在网页打开时创建，网页关闭时销毁
            - 所有直接写在script标签中的内容都位于全局作用域
                全局作用域中的变量是全局变量，函数是全局函数可以在任意位置被访问
            - 浏览器中有一个全局对象叫window，window代表浏览器的窗口
                在全局作用域中，所有使用var声明的变量都会作为window对象的属性保存
                所有使用function创建的函数都会作为window对象的方法保存

            - 变量的提升：
                - 所有使用var声明的变量，会在其他的代码执行前被声明，
                    所以可以在声明前就去访问这个变量。
            - 函数的提升
                - 所有以function开头的函数，会在其他的代码执行前被创建，
                    所以可以在函数声明前就对其进行调用

            - 代码的执行：
                1.预解析
                    - 找var和function
                    - 声明var的变量，创建function的函数
                2.逐行执行代码

        - 函数作用域：
            - 函数作用域在函数调用时创建，在调用结束时销毁
            - 函数每调用一次就会产生一个函数作用域，
                函数作用域与函数作用域之间是相互独立的
            - 函数作用域中使用let和var声明的变量是局部变量，
                局部变量只能在函数内部访问，在函数外部无法访问
            - 如果声明变量时不使用关键字，变量会成为全局变量
            - 变量的提升和函数的提升在函数作用域中同样适用




